<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ideal.Core.Redis</name>
    </assembly>
    <members>
        <member name="T:Ideal.Core.Redis.Configurations.ConfigManager">
            <summary>
            配置管理
            </summary>
        </member>
        <member name="M:Ideal.Core.Redis.Configurations.ConfigManager.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">IConfiguration</param>
        </member>
        <member name="P:Ideal.Core.Redis.Configurations.ConfigManager.RedisOptions">
            <summary>
            字符串链接
            </summary>
        </member>
        <member name="T:Ideal.Core.Redis.Configurations.IConfigManager">
            <summary>
            配置管理
            </summary>
        </member>
        <member name="P:Ideal.Core.Redis.Configurations.IConfigManager.RedisOptions">
            <summary>
            Redis配置
            </summary>
        </member>
        <member name="T:Ideal.Core.Redis.Configurations.Options.RedisOptions">
            <summary>
            主从库 配置
            </summary>
        </member>
        <member name="P:Ideal.Core.Redis.Configurations.Options.Default.Server">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="P:Ideal.Core.Redis.Configurations.Options.Default.Port">
            <summary>
            监听端口号
            </summary>
        </member>
        <member name="P:Ideal.Core.Redis.Configurations.Options.Default.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Ideal.Core.Redis.Configurations.Options.Default.DefaultDatabase">
            <summary>
            默认库
            </summary>
        </member>
        <member name="T:Ideal.Core.Redis.IRedisService">
            <summary>
            MqttClientService
            </summary>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.CacheShellAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.CacheShellAsync``1(System.String,System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.CacheShellAsync``1(System.String,System.String[],System.Int32,System.Func{System.String[],System.Threading.Tasks.Task{System.ValueTuple{System.String,``0}[]}})">
            <summary>
            缓存壳(哈希表)，将 fields 每个元素存储到单独的缓存片，实现最大化复用
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数，输入参数是没有缓存的 fields，返回值应该是 (field, value)[]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.EchoAsync(System.String,System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.EchoAsync(System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PingAsync(System.String)">
            <summary>
            查看服务是否运行
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PingAsync">
            <summary>
            查看服务是否运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.EvalAsync(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.EvalSHAAsync(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ScriptExistsAsync(System.String[])">
            <summary>
            校验所有分区节点中，脚本是否已经缓存。任何分区节点未缓存sha1，都返回false。
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ScriptFlushAsync">
            <summary>
            清除所有分区节点中，所有 Lua 脚本缓存
            </summary>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ScriptKillAsync">
            <summary>
            杀死所有分区节点中，当前正在运行的 Lua 脚本
            </summary>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ScriptLoadAsync(System.String)">
            <summary>
            在所有分区节点中，缓存脚本后返回 sha1（同样的脚本在任何服务器，缓存后的 sha1 都是相同的）
            </summary>
            <param name="script">Lua 脚本</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PublishAsync(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PublishNoneMessageIdAsync(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PubSubChannelsAsync(System.String)">
            <summary>
            查看所有订阅频道
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PfAddAsync``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZAddAsync(System.String,System.ValueTuple{System.Decimal,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZCardAsync(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZCountAsync(System.String,System.Decimal,System.Decimal)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZCountAsync(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZIncrByAsync(System.String,System.String,System.Decimal)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZInterStoreAsync(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeWithScoresAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScoreAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScoreAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScoreAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScoreWithScoresAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScoreWithScoresAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScoreWithScoresAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRankAsync(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRemAsync``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRemRangeByRankAsync(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRemRangeByScoreAsync(System.String,System.Decimal,System.Decimal)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRemRangeByScoreAsync(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeWithScoresAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScoreAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScoreAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScoreAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScoreWithScoresAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScoreWithScoresAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScoreWithScoresAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRankAsync(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZScoreAsync(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZUnionStoreAsync(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByLexAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRemRangeByLexAsync(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZLexCountAsync(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SAddAsync``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SCardAsync(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SDiffAsync(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SDiffAsync``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SDiffStoreAsync(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SInterAsync(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SInterAsync``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SInterStoreAsync(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SIsMemberAsync(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SMembersAsync(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SMembersAsync``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SMoveAsync(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SPopAsync(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SPopAsync``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SPopAsync(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SPopAsync``1(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SRandMemberAsync(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SRandMemberAsync``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SRandMembersAsync(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SRandMembersAsync``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SRemAsync``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SUnionAsync(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SUnionAsync``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SUnionStoreAsync(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LIndexAsync(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LIndexAsync``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LInsertBeforeAsync(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LInsertAfterAsync(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LLenAsync(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LPopAsync(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LPopAsync``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LPushAsync``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LPushXAsync(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LRemAsync(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LSetAsync(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LTrimAsync(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RPopAsync(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RPopAsync``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RPopLPushAsync(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RPopLPushAsync``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RPushAsync``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RPushXAsync(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HDelAsync(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HExistsAsync(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HGetAsync(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HGetAsync``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HGetAllAsync(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HGetAllAsync``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HIncrByAsync(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HIncrByFloatAsync(System.String,System.String,System.Decimal)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HKeysAsync(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HLenAsync(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HMGetAsync(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HMGetAsync``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HMSetAsync(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HSetNxAsync(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HValsAsync(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HValsAsync``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZPopMaxAsync(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZPopMaxAsync``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZPopMinAsync(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZPopMinAsync``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.AppendAsync(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BitCountAsync(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BitOpAsync(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BitPosAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GetAsync(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GetAsync``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GetBitAsync(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GetRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GetRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GetSetAsync(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GetSetAsync``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.IncrByAsync(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.IncrByFloatAsync(System.String,System.Decimal)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.MGetAsync(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.MGetAsync``1(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.MSetAsync(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.MSetNxAsync(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SetAsync(System.String,System.Object,System.Int32,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SetBitAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SetNxAsync(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SetRangeAsync(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.StrLenAsync(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.DelAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.DumpAsync(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ExistsAsync(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ExistsAsync(System.String[])">
            <summary>
            [redis-server 3.0] 检查给定多个 key 是否存在
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ExpireAsync(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.KeysAsync(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.MoveAsync(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ObjectEncodingAsync(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ObjectRefCountAsync(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ObjectIdleTimeAsync(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PersistAsync(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PExpireAsync(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PTtlAsync(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RandomKeyAsync">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RenameAsync(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RenameNxAsync(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RestoreAsync(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RestoreAsync(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SortAsync(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SortAndStoreAsync(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.TtlAsync(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.TypeAsync(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ScanAsync(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ScanAsync``1(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoAddAsync(System.String,System.Decimal,System.Decimal,System.Object)">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoAddAsync(System.String,System.ValueTuple{System.Decimal,System.Decimal,System.Object}[])">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="values">批量添加的值</param>
            <returns>添加到sorted set元素的数目，但不包括已更新score的元素。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoDistAsync(System.String,System.Object,System.Object,CSRedis.GeoUnit)">
            <summary>
            返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值。GEODIST 命令在计算距离时会假设地球为完美的球形， 在极限情况下， 这一假设最大会造成 0.5% 的误差。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member1">成员1</param>
            <param name="member2">成员2</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <returns>计算出的距离会以双精度浮点数的形式被返回。 如果给定的位置元素不存在， 那么命令返回空值。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoHashAsync(System.String,System.Object[])">
            <summary>
            返回一个或多个位置元素的 Geohash 表示。通常使用表示位置的元素使用不同的技术，使用Geohash位置52点整数编码。由于编码和解码过程中所使用的初始最小和最大坐标不同，编码的编码也不同于标准。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>一个数组， 数组的每个项都是一个 geohash 。 命令返回的 geohash 的位置与用户给定的位置元素的位置一一对应。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoPosAsync(System.String,System.Object[])">
            <summary>
            从key里返回所有给定位置元素的位置（经度和纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>GEOPOS 命令返回一个数组， 数组中的每个项都由两个元素组成： 第一个元素为给定位置元素的经度， 而第二个元素则为给定位置元素的纬度。当给定的位置元素不存在时， 对应的数组项为空值。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusWithDistAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusWithDistAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusWithDistAndCoordAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusWithDistAndCoordAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusByMemberAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusByMemberAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusByMemberWithDistAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusByMemberWithDistAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusByMemberWithDistAndCoordAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusByMemberWithDistAndCoordAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.CacheShell``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.CacheShell``1(System.String,System.String,System.Int32,System.Func{``0})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.CacheShell``1(System.String,System.String[],System.Int32,System.Func{System.String[],System.ValueTuple{System.String,``0}[]})">
            <summary>
            缓存壳(哈希表)，将 fields 每个元素存储到单独的缓存片，实现最大化复用
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数，输入参数是没有缓存的 fields，返回值应该是 (field, value)[]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.StartPipe(System.Action{CSRedis.CSRedisClientPipe{System.String}})">
            <summary>
            创建管道传输
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.StartPipe">
            <summary>
            创建管道传输，打包提交如：RedisHelper.StartPipe().Set("a", "1").HSet("b", "f", "2").EndPipe();
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.NodesServerManager">
            <summary>
            在所有分区节点上，执行服务器命令
            </summary>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.NodeServerManager(System.String)">
            <summary>
            在指定分区节点上，执行服务器命令
            </summary>
            <param name="node">节点</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Echo(System.String,System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Echo(System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Ping(System.String)">
            <summary>
            查看服务是否运行
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Ping">
            <summary>
            查看服务是否运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Eval(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.EvalSHA(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ScriptExists(System.String[])">
            <summary>
            校验所有分区节点中，脚本是否已经缓存。任何分区节点未缓存sha1，都返回false。
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ScriptFlush">
            <summary>
            清除所有分区节点中，所有 Lua 脚本缓存
            </summary>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ScriptKill">
            <summary>
            杀死所有分区节点中，当前正在运行的 Lua 脚本
            </summary>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ScriptLoad(System.String)">
            <summary>
            在所有分区节点中，缓存脚本后返回 sha1（同样的脚本在任何服务器，缓存后的 sha1 都是相同的）
            </summary>
            <param name="script">Lua 脚本</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Publish(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PublishNoneMessageId(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PubSubChannels(System.String)">
            <summary>
            查看所有订阅频道
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PubSubNumPat">
            <summary>
            查看所有模糊订阅端的数量<para></para>
            注意：分区模式下，其他客户端的订阅可能不会返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PubSubNumSub(System.String[])">
            <summary>
            查看所有订阅端的数量<para></para>
            注意：分区模式下，其他客户端的订阅可能不会返回
            </summary>
            <param name="channels">频道</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Subscribe(System.ValueTuple{System.String,System.Action{CSRedis.CSRedisClient.SubscribeMessageEventArgs}}[])">
            <summary>
            订阅，根据分区规则返回SubscribeObject，Subscribe(("chan1", msg => Console.WriteLine(msg.Body)), ("chan2", msg => Console.WriteLine(msg.Body)))
            </summary>
            <param name="channels">频道和接收器</param>
            <returns>返回可停止订阅的对象</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PSubscribe(System.String[],System.Action{CSRedis.CSRedisClient.PSubscribePMessageEventArgs})">
            <summary>
            模糊订阅，订阅所有分区节点(同条消息只处理一次），返回SubscribeObject，PSubscribe(new [] { "chan1*", "chan2*" }, msg => Console.WriteLine(msg.Body))
            </summary>
            <param name="channelPatterns">模糊频道</param>
            <param name="pmessage">接收器</param>
            <returns>返回可停止模糊订阅的对象</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SubscribeListBroadcast(System.String,System.String,System.Action{System.String})">
            <summary>
            使用lpush + blpop订阅端（多端非争抢模式），都可以收到消息
            </summary>
            <param name="listKey">list key（不含prefix前辍）</param>
            <param name="clientId">订阅端标识，若重复则争抢，若唯一必然收到消息</param>
            <param name="onMessage">接收消息委托</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SubscribeList(System.String,System.Action{System.String})">
            <summary>
            使用lpush + blpop订阅端（多端争抢模式），只有一端收到消息
            </summary>
            <param name="listKey">list key（不含prefix前辍）</param>
            <param name="onMessage">接收消息委托</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SubscribeList(System.String[],System.Action{System.String,System.String})">
            <summary>
            使用lpush + blpop订阅端（多端争抢模式），只有一端收到消息
            </summary>
            <param name="listKeys">支持多个 key（不含prefix前辍）</param>
            <param name="onMessage">接收消息委托，参数1：key；参数2：消息体</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PfAdd``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PfCount(System.String[])">
            <summary>
            返回给定 HyperLogLog 的基数估算值<para></para>
            注意：分区模式下，若keys分散在多个分区节点时，将报错
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PfMerge(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog<para></para>
            注意：分区模式下，若keys分散在多个分区节点时，将报错
            </summary>
            <param name="destKey">新的 HyperLogLog，不含prefix前辍</param>
            <param name="sourceKeys">源 HyperLogLog，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZAdd(System.String,System.ValueTuple{System.Decimal,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZCard(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZCount(System.String,System.Decimal,System.Decimal)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZCount(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZIncrBy(System.String,System.String,System.Decimal)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZInterStore(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRange(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScoreWithScores``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRem``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRemRangeByScore(System.String,System.Decimal,System.Decimal)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRemRangeByScore(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScoreWithScores``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRevRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZScore(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZUnionStore(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRangeByLex``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZLexCount(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZPopMax(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZPopMax``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZPopMin(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ZPopMin``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SAdd``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SCard(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SDiff(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SDiff``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SDiffStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SInter(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SInter``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SInterStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SIsMember(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SMembers(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SMembers``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SMove(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SPop(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SPop``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SPop(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SPop``1(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SRandMember(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SRandMember``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SRandMembers(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SRandMembers``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SRem``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SUnion(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SUnion``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SUnionStore(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BLPopWithKey``1(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BLPop(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BLPop``1(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BRPopWithKey``1(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BRPop(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BRPop``1(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。
            当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="timeout">超时(秒)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BRPopLPush``1(System.String,System.String,System.Int32)">
            <summary>
            BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。
            当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="timeout">超时(秒)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LIndex(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LIndex``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LInsertBefore(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LInsertAfter(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LLen(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LPop(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LPop``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LPush``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LPushX(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LRem(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LSet(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RPop(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RPop``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RPopLPush(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RPopLPush``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RPush``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RPushX(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HDel(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HExists(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HGet(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HGet``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HGetAll(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HGetAll``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HIncrByFloat(System.String,System.String,System.Decimal)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HKeys(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HLen(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HMGet(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HMGet``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HMSet(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HSet(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HSetNx(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HVals(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HVals``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.HScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Append(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BitCount(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BitOp(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Get(System.String,System.IO.Stream,System.Int32)">
            <summary>
            获取指定 key 的值（适用大对象返回）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="destination">读取后写入目标流中</param>
            <param name="bufferSize">读取缓冲区</param>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GetBit(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GetRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GetSet(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GetSet``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.IncrBy(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.IncrByFloat(System.String,System.Decimal)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.MGet(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.MGet``1(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.MSet(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.MSetNx(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Set(System.String,System.Object,System.Int32,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SetNx(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.StrLen(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Del(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Dump(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Exists(System.String[])">
            <summary>
            [redis-server 3.0] 检查给定多个 key 是否存在
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Expire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Expire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Keys(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            <para>Keys方法返回的keys[]包含prefix，使用前请自行处理</para>
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Move(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ObjectEncoding(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ObjectRefCount(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.ObjectIdleTime(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Persist(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PExpire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PExpire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.PTtl(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RandomKey">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Rename(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.RenameNx(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Restore(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Restore(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Sort(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Ttl(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Type(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Scan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoAdd(System.String,System.Decimal,System.Decimal,System.Object)">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoAdd(System.String,System.ValueTuple{System.Decimal,System.Decimal,System.Object}[])">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="values">批量添加的值</param>
            <returns>添加到sorted set元素的数目，但不包括已更新score的元素。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoDist(System.String,System.Object,System.Object,CSRedis.GeoUnit)">
            <summary>
            返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值。GEODIST 命令在计算距离时会假设地球为完美的球形， 在极限情况下， 这一假设最大会造成 0.5% 的误差。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member1">成员1</param>
            <param name="member2">成员2</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <returns>计算出的距离会以双精度浮点数的形式被返回。 如果给定的位置元素不存在， 那么命令返回空值。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoHash(System.String,System.Object[])">
            <summary>
            返回一个或多个位置元素的 Geohash 表示。通常使用表示位置的元素使用不同的技术，使用Geohash位置52点整数编码。由于编码和解码过程中所使用的初始最小和最大坐标不同，编码的编码也不同于标准。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>一个数组， 数组的每个项都是一个 geohash 。 命令返回的 geohash 的位置与用户给定的位置元素的位置一一对应。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoPos(System.String,System.Object[])">
            <summary>
            从key里返回所有给定位置元素的位置（经度和纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>GEOPOS 命令返回一个数组， 数组中的每个项都由两个元素组成： 第一个元素为给定位置元素的经度， 而第二个元素则为给定位置元素的纬度。当给定的位置元素不存在时， 对应的数组项为空值。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadius(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadius``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusWithDist(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusWithDist``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusWithDistAndCoord(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusWithDistAndCoord``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusByMember(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusByMember``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusByMemberWithDist(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusByMemberWithDist``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusByMemberWithDistAndCoord(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.GeoRadiusByMemberWithDistAndCoord``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.IRedisService.Lock(System.String,System.Int32,System.Boolean)">
            <summary> 
            开启分布式锁，若超时返回null
            </summary>
            <param name="name">锁名称</param>
            <param name="timeoutSeconds">超时（秒）</param>
            <param name="autoDelay">自动延长锁超时时间，看门狗线程的超时时间为timeoutSeconds/2 ， 在看门狗线程超时时间时自动延长锁的时间为timeoutSeconds。除非程序意外退出，否则永不超时。</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.CacheShellAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.CacheShellAsync``1(System.String,System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.CacheShellAsync``1(System.String,System.String[],System.Int32,System.Func{System.String[],System.Threading.Tasks.Task{System.ValueTuple{System.String,``0}[]}})">
            <summary>
            缓存壳(哈希表)，将 fields 每个元素存储到单独的缓存片，实现最大化复用
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数，输入参数是没有缓存的 fields，返回值应该是 (field, value)[]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.EchoAsync(System.String,System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.EchoAsync(System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PingAsync(System.String)">
            <summary>
            查看服务是否运行
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PingAsync">
            <summary>
            查看服务是否运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.EvalAsync(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.EvalSHAAsync(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ScriptExistsAsync(System.String[])">
            <summary>
            校验所有分区节点中，脚本是否已经缓存。任何分区节点未缓存sha1，都返回false。
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ScriptFlushAsync">
            <summary>
            清除所有分区节点中，所有 Lua 脚本缓存
            </summary>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ScriptKillAsync">
            <summary>
            杀死所有分区节点中，当前正在运行的 Lua 脚本
            </summary>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ScriptLoadAsync(System.String)">
            <summary>
            在所有分区节点中，缓存脚本后返回 sha1（同样的脚本在任何服务器，缓存后的 sha1 都是相同的）
            </summary>
            <param name="script">Lua 脚本</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PublishAsync(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PublishNoneMessageIdAsync(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PubSubChannelsAsync(System.String)">
            <summary>
            查看所有订阅频道
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PfAddAsync``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZAddAsync(System.String,System.ValueTuple{System.Decimal,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZCardAsync(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZCountAsync(System.String,System.Decimal,System.Decimal)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZCountAsync(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZIncrByAsync(System.String,System.String,System.Decimal)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZInterStoreAsync(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeWithScoresAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScoreAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScoreAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScoreAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScoreWithScoresAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScoreWithScoresAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScoreWithScoresAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRankAsync(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRemAsync``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRemRangeByRankAsync(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRemRangeByScoreAsync(System.String,System.Decimal,System.Decimal)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRemRangeByScoreAsync(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeWithScoresAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScoreAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScoreAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScoreAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScoreWithScoresAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScoreWithScoresAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScoreWithScoresAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRankAsync(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZScoreAsync(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZUnionStoreAsync(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByLexAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRemRangeByLexAsync(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZLexCountAsync(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SAddAsync``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SCardAsync(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SDiffAsync(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SDiffAsync``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SDiffStoreAsync(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SInterAsync(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SInterAsync``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SInterStoreAsync(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SIsMemberAsync(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SMembersAsync(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SMembersAsync``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SMoveAsync(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SPopAsync(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SPopAsync``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SPopAsync(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SPopAsync``1(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SRandMemberAsync(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SRandMemberAsync``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SRandMembersAsync(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SRandMembersAsync``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SRemAsync``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SUnionAsync(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SUnionAsync``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SUnionStoreAsync(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LIndexAsync(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LIndexAsync``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LInsertBeforeAsync(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LInsertAfterAsync(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LLenAsync(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LPopAsync(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LPopAsync``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LPushAsync``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LPushXAsync(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LRemAsync(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LSetAsync(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LTrimAsync(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RPopAsync(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RPopAsync``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RPopLPushAsync(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RPopLPushAsync``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RPushAsync``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RPushXAsync(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HDelAsync(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HExistsAsync(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HGetAsync(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HGetAsync``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HGetAllAsync(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HGetAllAsync``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HIncrByAsync(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HIncrByFloatAsync(System.String,System.String,System.Decimal)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HKeysAsync(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HLenAsync(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HMGetAsync(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HMGetAsync``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HMSetAsync(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HSetNxAsync(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HValsAsync(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HValsAsync``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZPopMaxAsync(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZPopMaxAsync``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZPopMinAsync(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZPopMinAsync``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.AppendAsync(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BitCountAsync(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BitOpAsync(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BitPosAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GetAsync(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GetAsync``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GetBitAsync(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GetRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GetRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GetSetAsync(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GetSetAsync``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.IncrByAsync(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.IncrByFloatAsync(System.String,System.Decimal)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.MGetAsync(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.MGetAsync``1(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.MSetAsync(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.MSetNxAsync(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SetAsync(System.String,System.Object,System.Int32,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SetBitAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SetNxAsync(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SetRangeAsync(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.StrLenAsync(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.DelAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.DumpAsync(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ExistsAsync(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ExistsAsync(System.String[])">
            <summary>
            [redis-server 3.0] 检查给定多个 key 是否存在
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ExpireAsync(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.KeysAsync(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.MoveAsync(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ObjectEncodingAsync(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ObjectRefCountAsync(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ObjectIdleTimeAsync(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PersistAsync(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PExpireAsync(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PTtlAsync(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RandomKeyAsync">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RenameAsync(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RenameNxAsync(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RestoreAsync(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RestoreAsync(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SortAsync(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SortAndStoreAsync(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.TtlAsync(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.TypeAsync(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ScanAsync(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ScanAsync``1(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoAddAsync(System.String,System.Decimal,System.Decimal,System.Object)">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoAddAsync(System.String,System.ValueTuple{System.Decimal,System.Decimal,System.Object}[])">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="values">批量添加的值</param>
            <returns>添加到sorted set元素的数目，但不包括已更新score的元素。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoDistAsync(System.String,System.Object,System.Object,CSRedis.GeoUnit)">
            <summary>
            返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值。GEODIST 命令在计算距离时会假设地球为完美的球形， 在极限情况下， 这一假设最大会造成 0.5% 的误差。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member1">成员1</param>
            <param name="member2">成员2</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <returns>计算出的距离会以双精度浮点数的形式被返回。 如果给定的位置元素不存在， 那么命令返回空值。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoHashAsync(System.String,System.Object[])">
            <summary>
            返回一个或多个位置元素的 Geohash 表示。通常使用表示位置的元素使用不同的技术，使用Geohash位置52点整数编码。由于编码和解码过程中所使用的初始最小和最大坐标不同，编码的编码也不同于标准。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>一个数组， 数组的每个项都是一个 geohash 。 命令返回的 geohash 的位置与用户给定的位置元素的位置一一对应。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoPosAsync(System.String,System.Object[])">
            <summary>
            从key里返回所有给定位置元素的位置（经度和纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>GEOPOS 命令返回一个数组， 数组中的每个项都由两个元素组成： 第一个元素为给定位置元素的经度， 而第二个元素则为给定位置元素的纬度。当给定的位置元素不存在时， 对应的数组项为空值。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusWithDistAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusWithDistAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusWithDistAndCoordAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusWithDistAndCoordAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusByMemberAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusByMemberAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusByMemberWithDistAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusByMemberWithDistAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusByMemberWithDistAndCoordAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusByMemberWithDistAndCoordAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.CacheShell``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.CacheShell``1(System.String,System.String,System.Int32,System.Func{``0})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.CacheShell``1(System.String,System.String[],System.Int32,System.Func{System.String[],System.ValueTuple{System.String,``0}[]})">
            <summary>
            缓存壳(哈希表)，将 fields 每个元素存储到单独的缓存片，实现最大化复用
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数，输入参数是没有缓存的 fields，返回值应该是 (field, value)[]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.StartPipe(System.Action{CSRedis.CSRedisClientPipe{System.String}})">
            <summary>
            创建管道传输
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.StartPipe">
            <summary>
            创建管道传输，打包提交如：RedisHelper.StartPipe().Set("a", "1").HSet("b", "f", "2").EndPipe();
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.NodesServerManager">
            <summary>
            在所有分区节点上，执行服务器命令
            </summary>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.NodeServerManager(System.String)">
            <summary>
            在指定分区节点上，执行服务器命令
            </summary>
            <param name="node">节点</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Echo(System.String,System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Echo(System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Ping(System.String)">
            <summary>
            查看服务是否运行
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Ping">
            <summary>
            查看服务是否运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Eval(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.EvalSHA(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ScriptExists(System.String[])">
            <summary>
            校验所有分区节点中，脚本是否已经缓存。任何分区节点未缓存sha1，都返回false。
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ScriptFlush">
            <summary>
            清除所有分区节点中，所有 Lua 脚本缓存
            </summary>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ScriptKill">
            <summary>
            杀死所有分区节点中，当前正在运行的 Lua 脚本
            </summary>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ScriptLoad(System.String)">
            <summary>
            在所有分区节点中，缓存脚本后返回 sha1（同样的脚本在任何服务器，缓存后的 sha1 都是相同的）
            </summary>
            <param name="script">Lua 脚本</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Publish(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PublishNoneMessageId(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PubSubChannels(System.String)">
            <summary>
            查看所有订阅频道
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PubSubNumPat">
            <summary>
            查看所有模糊订阅端的数量<para></para>
            注意：分区模式下，其他客户端的订阅可能不会返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PubSubNumSub(System.String[])">
            <summary>
            查看所有订阅端的数量<para></para>
            注意：分区模式下，其他客户端的订阅可能不会返回
            </summary>
            <param name="channels">频道</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Subscribe(System.ValueTuple{System.String,System.Action{CSRedis.CSRedisClient.SubscribeMessageEventArgs}}[])">
            <summary>
            订阅，根据分区规则返回SubscribeObject，Subscribe(("chan1", msg => Console.WriteLine(msg.Body)), ("chan2", msg => Console.WriteLine(msg.Body)))
            </summary>
            <param name="channels">频道和接收器</param>
            <returns>返回可停止订阅的对象</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PSubscribe(System.String[],System.Action{CSRedis.CSRedisClient.PSubscribePMessageEventArgs})">
            <summary>
            模糊订阅，订阅所有分区节点(同条消息只处理一次），返回SubscribeObject，PSubscribe(new [] { "chan1*", "chan2*" }, msg => Console.WriteLine(msg.Body))
            </summary>
            <param name="channelPatterns">模糊频道</param>
            <param name="pmessage">接收器</param>
            <returns>返回可停止模糊订阅的对象</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SubscribeListBroadcast(System.String,System.String,System.Action{System.String})">
            <summary>
            使用lpush + blpop订阅端（多端非争抢模式），都可以收到消息
            </summary>
            <param name="listKey">list key（不含prefix前辍）</param>
            <param name="clientId">订阅端标识，若重复则争抢，若唯一必然收到消息</param>
            <param name="onMessage">接收消息委托</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SubscribeList(System.String,System.Action{System.String})">
            <summary>
            使用lpush + blpop订阅端（多端争抢模式），只有一端收到消息
            </summary>
            <param name="listKey">list key（不含prefix前辍）</param>
            <param name="onMessage">接收消息委托</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SubscribeList(System.String[],System.Action{System.String,System.String})">
            <summary>
            使用lpush + blpop订阅端（多端争抢模式），只有一端收到消息
            </summary>
            <param name="listKeys">支持多个 key（不含prefix前辍）</param>
            <param name="onMessage">接收消息委托，参数1：key；参数2：消息体</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PfAdd``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PfCount(System.String[])">
            <summary>
            返回给定 HyperLogLog 的基数估算值<para></para>
            注意：分区模式下，若keys分散在多个分区节点时，将报错
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PfMerge(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog<para></para>
            注意：分区模式下，若keys分散在多个分区节点时，将报错
            </summary>
            <param name="destKey">新的 HyperLogLog，不含prefix前辍</param>
            <param name="sourceKeys">源 HyperLogLog，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZAdd(System.String,System.ValueTuple{System.Decimal,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZCard(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZCount(System.String,System.Decimal,System.Decimal)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZCount(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZIncrBy(System.String,System.String,System.Decimal)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZInterStore(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRange(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScoreWithScores``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRem``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRemRangeByScore(System.String,System.Decimal,System.Decimal)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRemRangeByScore(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScoreWithScores``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRevRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZScore(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZUnionStore(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRangeByLex``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZLexCount(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZPopMax(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZPopMax``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZPopMin(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ZPopMin``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SAdd``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SCard(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SDiff(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SDiff``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SDiffStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SInter(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SInter``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SInterStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SIsMember(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SMembers(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SMembers``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SMove(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SPop(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SPop``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SPop(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SPop``1(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SRandMember(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SRandMember``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SRandMembers(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SRandMembers``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SRem``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SUnion(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SUnion``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SUnionStore(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BLPopWithKey``1(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BLPop(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BLPop``1(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BRPopWithKey``1(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BRPop(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BRPop``1(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。
            当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="timeout">超时(秒)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BRPopLPush``1(System.String,System.String,System.Int32)">
            <summary>
            BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。
            当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="timeout">超时(秒)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LIndex(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LIndex``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LInsertBefore(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LInsertAfter(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LLen(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LPop(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LPop``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LPush``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LPushX(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LRem(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LSet(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RPop(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RPop``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RPopLPush(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RPopLPush``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RPush``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RPushX(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HDel(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HExists(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HGet(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HGet``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HGetAll(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HGetAll``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HIncrByFloat(System.String,System.String,System.Decimal)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HKeys(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HLen(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HMGet(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HMGet``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HMSet(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HSet(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HSetNx(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HVals(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HVals``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.HScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Append(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BitCount(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BitOp(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Get(System.String,System.IO.Stream,System.Int32)">
            <summary>
            获取指定 key 的值（适用大对象返回）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="destination">读取后写入目标流中</param>
            <param name="bufferSize">读取缓冲区</param>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GetBit(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GetRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GetSet(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GetSet``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.IncrBy(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.IncrByFloat(System.String,System.Decimal)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.MGet(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.MGet``1(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.MSet(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.MSetNx(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Set(System.String,System.Object,System.Int32,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SetNx(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.StrLen(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Del(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Dump(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Exists(System.String[])">
            <summary>
            [redis-server 3.0] 检查给定多个 key 是否存在
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Expire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Expire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Keys(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            <para>Keys方法返回的keys[]包含prefix，使用前请自行处理</para>
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Move(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ObjectEncoding(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ObjectRefCount(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.ObjectIdleTime(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Persist(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PExpire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PExpire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.PTtl(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RandomKey">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Rename(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.RenameNx(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Restore(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Restore(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Sort(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Ttl(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Type(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Scan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoAdd(System.String,System.Decimal,System.Decimal,System.Object)">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoAdd(System.String,System.ValueTuple{System.Decimal,System.Decimal,System.Object}[])">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="values">批量添加的值</param>
            <returns>添加到sorted set元素的数目，但不包括已更新score的元素。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoDist(System.String,System.Object,System.Object,CSRedis.GeoUnit)">
            <summary>
            返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值。GEODIST 命令在计算距离时会假设地球为完美的球形， 在极限情况下， 这一假设最大会造成 0.5% 的误差。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member1">成员1</param>
            <param name="member2">成员2</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <returns>计算出的距离会以双精度浮点数的形式被返回。 如果给定的位置元素不存在， 那么命令返回空值。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoHash(System.String,System.Object[])">
            <summary>
            返回一个或多个位置元素的 Geohash 表示。通常使用表示位置的元素使用不同的技术，使用Geohash位置52点整数编码。由于编码和解码过程中所使用的初始最小和最大坐标不同，编码的编码也不同于标准。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>一个数组， 数组的每个项都是一个 geohash 。 命令返回的 geohash 的位置与用户给定的位置元素的位置一一对应。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoPos(System.String,System.Object[])">
            <summary>
            从key里返回所有给定位置元素的位置（经度和纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>GEOPOS 命令返回一个数组， 数组中的每个项都由两个元素组成： 第一个元素为给定位置元素的经度， 而第二个元素则为给定位置元素的纬度。当给定的位置元素不存在时， 对应的数组项为空值。</returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadius(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadius``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusWithDist(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusWithDist``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusWithDistAndCoord(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusWithDistAndCoord``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusByMember(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusByMember``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusByMemberWithDist(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusByMemberWithDist``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusByMemberWithDistAndCoord(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.GeoRadiusByMemberWithDistAndCoord``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisService.Lock(System.String,System.Int32,System.Boolean)">
            <summary> 
            开启分布式锁，若超时返回null
            </summary>
            <param name="name">锁名称</param>
            <param name="timeoutSeconds">超时（秒）</param>
            <param name="autoDelay">自动延长锁超时时间，看门狗线程的超时时间为timeoutSeconds/2 ， 在看门狗线程超时时间时自动延长锁的时间为timeoutSeconds。除非程序意外退出，否则永不超时。</param>
            <returns></returns>
        </member>
        <member name="M:Ideal.Core.Redis.RedisSetupExtensions.AddRedisClientSetup(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Redis客户端启动项
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
    </members>
</doc>
